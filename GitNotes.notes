In order to open the directory that you're currently in the terminal just type (start .) and it will open in file explorer sometimes it can be very useful.

To move/copy a file or folder to the parent directory you can use the command mv (fileName.ext ..) or cp (fileName.ext ..).

Instead of just writing ls you can even write ls folderName/path (A random folder in current directory or even a path for that matter) it will show it's contents too.h

You can use git add directoryName too incase you want to add an entire directory to the staging area.
One good practice to go by is making commits atomic basically make commits that focus on one feature of whatever but don't make commits that change a lot of files in lots of things and have not much of a relation with each other that will cause a lot of issues if you revert a commit.

For long commit messages you can change the default editor from vim to vscode easily using this command (git config --global core.editor "code --wait")
In these long commit messages you can even have paragraphs and bullet points and stuff.

git log incase of long commit messages is a troublesome thing to scroll through.
So, You can just use git log --oneline (What this does is it does two things one shortens the hash code and second is it only shows the first line of your commit messages.)

So, While making long commit messages make sure that the first line tells you okay this is exactly what you did and then add a blank line and then write the rest of longer message.(This is so when someone reads oneline explanation he/she should atleast be able to understand what happend due to this commit and if they want to go and read more about it they can just use git log rather than using git log --oneline)

Amending Commits :-
Suppose you just made a commit and then realized you forgot to include a file. Or, maybe you made a typo in the commit message that you want to correct.
Rather than making a brand new separate commit, you can "redo" the previous commit using the --amend option.
What git commit --amend does is it takes the new files in the staging area and adds it to the previous commit and also gives you an option to change the previous commit message through opening your default editor that you set up using git config.
So, If you let's just say you want to change the previous commit message you can just go ahead and use amend to change that without adding any files to the staging area cause if you add something to the staging area you will also be bundling that up with the previous commit.
Just remember git commit --amend can only make changes to the previous/most recent commit not to any of the previous commits before that.

Ignoring Files
We can tell Git which files and directories to ignore in a given repository, using a .gitignore file. This is useful for files you know you NEVER want to commit, including :-
• Secrets, API keys, credentials, etc.
• Operating System files (.DS—Store on Mac)
• Log files
• Dependencies & packages

To ignore files we can do it using .gitignore file.
Create a file called .gitignore in the root of a repository (or anywhere in the repository but it's a convention to do it in root directory). 
Inside the file, we can write patterns to tell Git which files 8 folders to ignore :-
• .DS_Store will ignore files named .DS_Store
• folderName/ will ignore an entire directory
• *.log will ignore any files with the .log extension
Also * means any pattern but ? means a single character so you can even have a git ignore line that says ?.log it will ignore all the files that are x.log (where x can be any character.)
gitignore.io is a good site that gives you a prebuilt gitignore file for any language you might be planning to work in so you don't have to go and add node_modules for every single JS project.

master/main branch is nothing special it has no extra unique powers or anything it's just your default branch that's it every single branch with any name will all have the same capabilities.
Your branch name shouldn't have spaces.

A branch is just a reference to some commit.(Think about it.)
Also one more thing each commit also has the hashcode of the previous commit too so it can go back to the previous commit.

git branch :- Shows all the branches you have in your project and also highlights the one you're currently on by putting a (*) in front of it.
git branch <branch-name> :-  This is used to make a new branch based upon the current HEAD (This line that you just read is exteremly important). This just creates the branch. It does not switch you to that branch (the HEAD stays the same).

git commit -a -m 'some message' is just doing git add . and then git commit -m 'some message'. So, it's basically doing it adds all the changes to the staging area and then commits with the message provided.

Instead of doing git branch newBranchName and then doing git switch newBranchName
You can create and switch to a new branch with just one step too that can be done using git switch -c newBranchName. (c stands for create)

Do keep in mind :-
git switch randomBranchName (This will give you an error if their is no branch by the name of randomBranchName so that -c flag is important).

git checkout <branch-name> can also be used for switching branches but it's a little bit older way of doing it.
git checkout -b <branch-name> is used to create and switch to the branch just like git switch -c <branch-name>

When you switch from one branch to other all the files and all the changes in all those files that we left it at will all be restored branches are not related to a single file.

If you have a file that's part of two branches and if you try to write something in a file and without committing the changes you want to just go ahead and change the branch what that will do is it will give you a fair warning saying whatever you did in this file will be lost if you don't stash or commit these changes. 
We will learn about stashing later but for now we should commit if we want to preserve the data.
But let's say in a branch you created a completely new file and you switch to another branch without commiting that file that file will follow you to the new branch as well you will be able to switch to the other branch no problem but just keep in mind that file which didn't exist in the other branch will say okay i'm an untracked file.

Deleting a branch :-
In order to delete a branch we use the git branch -d <branch-name>
But first most important thing is you can't delete a branch if you're currently on it you must first move to a different branch if you want to delete it.
Second thing that you should also know is if you just use this command git branch -d <branch-name> it will only delete this branch if it has been merged with some other branch completely.
But if you're sure that you want to delete the branch without even merging you should use the -D flag.
So, git branch -D <branch-name> (even this command also you can use from after switching to other branch than the one you'd like to delete.) is your commad that you should use if you want to delete without merging.

Renaming a branch :-
In order to rename first you must switch to the branch that you want to rename. (It's opposite of deleting a branch)
Then use git branch -m UpdatedNameForThisBranch.

git branch -v (Shows all the branches but also shows the latest commit in each of those branches.)

Merging branches :-
If you want to merge a branch into some other branch you must do this :-
1 :- Switch to the branch in which the branch will be finally merged in like if you want to merge oldies branch into master first switch to master.
2 :- Then go ahead and write git merge oldies. 
If no commits have been done in the master branch since the oldies branch was made out of it but in oldies branch after it branched from master branch some commits have been done it is called a fast-forward merge. (In this all what happens is we just move the branch pointer of master to the latest commit in oldies that's it.)

Now coming to the case where the master branch had some more commits as you worked on your separate branch.
Now you might think that will always lead to an issue but that's not the case let's say in master branch you worked on randomFile.txt and in other branch you just worked on some other files all together and there is no conflict as in no line in common files is different in any of the files in that case we don't have to do much at all.
Just do git merge <branch-name> from the master branch if you want to merge into master branch.
If there are no conflicts you'll just be provided with a message window like you would in git commit and just write another message.
And a new commit will be created due to this merge and all the changes in both the branch's latest commits will be merged as well this is actually called a merge commit.

Sometimes you might have conflicts in multiple files as well while merging so you will have to resolve conflicts in all those files manually as well.
Also while merging two branches you don't have to just accept changes from one or the other or both you can even add extra stuff when coming to code you might even have to add extra comments or code that's needed in order for this merge to be successful and there is nothing wrong in doing that just because you're resolving conflicts that doesn't mean you have to be limited to only accepting code from one file or other or both.

Diff :-
git diff :- This command what it does is it gives shows you all the unstaged changes in the files that were once staged in previous commits. But if you stage these updated files it won't show you those changes in git diff. It's a bit weird let me explain further :-
            So, Basically it gives you the difference between your working directory and the staging area.
            Like let's say you have a file rainbow.txt and you committed with colors written red,orange.
            Now, If you add the color blue to it and without staging it if you type git diff it will show you oh. you have added blue cause this file was once staged when it was commited the last time.
            But if you stage this change and then type git diff then it won't show you any changes cause it's comparing the latest version of this file that came to it with the working directory.
            But if you add a new file that was never tracked by the previous commit and you have never added it to the staging area either during your last commit cause you made it after the commit.
            Now git diff won't show you any difference between staging area and this file even if you add this file to the staging area cause it's comparing it with the staging area file. (Without adding it to the staging even git diff HEAD won't show any difference cause the file would be untracked.)
            But if you add it to the staging area now and type git diff HEAD it will show you the changes cause it's comparing the commit where the HEAD is pointing and the staged and unstaged(That were once staged but staged now by that I mean they shouldn't be untracked files.)

git diff HEAD :- This command shows all the changes whether they be staged or unstaged between the commit where head in pointing no matter the branch and the current working directory.

So, we have seen how to see the difference between staging area and unstaged changes in those files using git diff and using git diff HEAD we have seen how to see the unstaged and staged changes when compared to the last commit.
So, If you now want to see just the staged changes when compared to the last commit.
We use :-
git diff --staged or git diff --cached :- This will list the changes between the staging area and our last commit. Basically it's like saying 'Show me what will be included in my commit if I run git commit right now'.

Diff-ing Specific Files
We can view the changes within a specific file by providing git diff with a filename.
 git diff [filename]  // These all work the same way they did before it's just that they will now show changes in the file/files mentioned after the git diff commands.
 git diff HEAD [filename]
 git diff --staged [filename]

 Example :- git diff GitNotes.notes 
 Multiple files are also allowed :- git diff --staged GitNotes.notes someOtherRandomFile.ext someOtherRandomFile2.ext

git diff branch1..branch2 :- This will list the changes between the tips of branchl and branch2. (Do remember .. here in between branch names is optional but people like doing that anyways.)
                             It's usually the case that git diff branch1..branch2 will give the opposite result of git diff branch2..branch1.
                             This command gives the difference between both the latest commits in both the branches in all the files.
                             Again you can write the file names if you just want to see the difference in some certain file/files.
                             Like :- git diff branch1..branch2 fileName.ext


Now if you want to compare between two commits you can use a similar kind of syntax.
git diff commitHash1..commitHash2(.. is optional) again all the properties of git diff branch1..branch2 apply here as well. (Using this command you can compare differences between any two commits they need not be from the same branch they can be from different branches as well.)

For git diff it's better to use GUIs like gitkraken. If you want to compare between two commits just hold down shift and chick on both of them.
For seeing unstaged,staged chnages in GUIs it's simple you'll see those files in the unstaged and staged area and you'll be able to compare them just by clicking on those files in the unstaged, staged areas.

If you want to compare the differences between the HEAD commit on this branch with it's parent there are two ways of doing that.
One would be you copy their commit hashes and see the diff.
Other one would be to write git diff HEAD HEAD~1. It just compares it with the commit that was just before the HEAD commit.(Similarly you can even your 2,3,4 inplace of 1.)
Other way would be git diff HEAD~1 (This is equivalant to writing git diff HEAD~1 HEAD). Usually this way is better cause you see the recent additions as + signs and deletions are - signs.

Stashing :- 

Why do we need stashing ?

When you have uncommited changes in your file/s and you try to switch branches it will lead to one of these two cases :-
1) Either the changes will go with you to the destination branch if there are no conflicts.
2) Other git won't let you switch the branches if it detect potential conflicts.
So, In order to temporarily save your changes without making an uneccesary commit that's where the use of stashing comes in.

Stashing :- Git provides an easy way of stashing these uncommitted changes so that we can return to them later, without having to make unnecessary commits.

git stash (or git stash save) :- git stash is super useful command that helps you save changes that you are not yet ready to commit. You can stash changes and then come back to them later. Running git stash will take all uncommitted changes (staged and unstaged) and stash them, reverting the changes in your working copy.
git stash pop :- Use git stash pop to remove the most recently stashed changes in your stash and re-apply them to your working copy. (Do keep in mind that stashed changes need not be popped at the branch you saved it from you can even apply them to some other branch as well.)
git stash apply :- You can use git stash apply to apply whatever is stashed away, without removing it from the stash. This can be useful if you want to apply stashed changes to multiple branches.

Stashing Multiple Times :- You can add multiple stashes onto the stack of stashes. They will all be stashed in the order you added them.
git stash list :- If you stash multiple changes from one branch (not common) or multiple branches you can view all of them through git stash list command. Each of the stash will show a message that is nothing but the most recent commit message from each of the branch where that stash was made.
Applying Specific Stashes From All The Stashes :-  git assumes you want to apply the most recent stash when you run git stash apply, but you can also specify a particular stash like git stash apply stash@{2}
Dropping Stashes :- To delete a particular stash, you can use git stash drop <stash-id> if you are not doing git stash pop cause that will anyways pop the most recent stash.
git stash clear :- This command will delete the entire stash stack all of the enteries will be cleared out.


Undoing Changes & Time Travelling :-


Must read these slides :- https://www.canva.com/design/DAEPZZHOafo/uagxrNdvbI_wDpjfNpK_4w/view?utm_content=DAEPZZHOafo&utm_campaign=designshare&utm_medium=link&utm_source=sharebutton
The git checkout command is like a Git Swiss Army knife. Many developers think it is overloaded, which is what lead to the addition of the git switch and git restore commands We can use checkout to create branches, switch to new branches, restore files, and undo history!
We can use git checkout commit <commit-hash> to view a previous commit. Remember, you can use the git log command to view commit hashes. We just need the 7 digits of a commit hash (Which you can get using git log --oneline). Don't panic when you see the following message...
You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch.
See what's happening here is :- Usually, HEAD points to a specific branch reference rather than a particular commit.  
HEAD is a pointer to the current branch reference
The branch reference is a pointer to the last commit made on a particular branch.
When we make a new commit, the branch reference is updated to reflect the new commit. 
The HEAD remains the same, because it's pointing at the branch reference.
This is all to say that HEAD usually refers to a branch NOT a specific commit.
When we checkout a particular commit, HEAD points at that commit rather than at the branch pointer.

What can you do when you're in detached head state ?
You have a couple options :-
1 :- Stay in detached HEAD to examine the contents of the old commit. poke around, view the files, etc.
2 :- Leave and go back to wherever you were before - reattach the HEAD (This can be done by switching to any branch)
3 :- Create a new branch and switch to it. You can now make and save changes, since HEAD is no longer detached. (Cause now it will be pointing to the new branch reference.)


Checkout :-

git checkout supports a slightly odd syntax for referencing previous commits relative to a particular commit.
HEAD~1 refers to the commit before HEAD (parent). HEAD~2 refers to 2 commits before HEAD (grandparent). This is not essential, but I wanted to mention it because it's quite weird looking if you've never seen it.
So, Whereever the HEAD is pointing to right now it doesn't matter if it's a branch reference or if you're in detached HEAD state if you type git checkout HEAD~1 it will be moved to the previous commit of whereever the head currently points to.
Let's say you're in X branch and then you move to branch Y to do some work or whatever now you forget which branch you were on prior to this you can use (git switch -) command to switch back to the previously used branch.
In a similar fashion let's say you're in detached HEAD state and then want to go back to the the tip of this branch one thing is to type git switch X or just type (git switch -).


Discarding Changes :-

Suppose you've made some changes to a file but don't want to keep them. To revert the file back to whatever it looked like when you last committed, you can use :-
git checkout HEAD <filename>/<filenames> to discard any changes in that file, reverting back to the the commit where the HEAD is pointing.
git checkout -- <filename>/<filenames> also is kind of a shortcut for doing the same thing as the command just above.

Newer way of discarding changes rather than using the above two commands is through git restore
git restore is a brand new Git command that helps with undoing operations.
Suppose made some changes to a file since you last commit. You've saved the file but then realize you definitely do NOT want those changes anymore. To restore the file to the contents in the HEAD, use git restore <file-name>/<file-names>. See this is exactly similar atleast in functionality to git checkout HEAD <filename>/<filenames>.
NOTE:
    The git restore command is not "undoable". If you have uncommited changes in the file, they will be lost!

Now you can even go back to how your file/files were even a few commits ago.
Normally git restore <file-name>/<file-names> restores using HEAD as the default source, but we can change that using the --source option.
For example, git restore --source HEAD~1 home.html (In place of HEAD~1 we can even write a commit hash of the commit to which you would like to revert this file/files back to. So, you can write the commit hash as an source too.)
One more thing to note is that the file that you're currently working on will be reverted back to what it looked like in previous commit depending on whatever you provide as the source but that doesn't mean your HEAD pointer also starts pointing there it's not like we go in some detached HEAD state. Our HEAD stays in the same location just those files are reverted back to what they looked like at the time that source commit was made.
Also, It's not the case you can only go back using git restore you can even move forward.
Let's say you ran the command git restore --source HEAD~2 and you felt like I would like to take this file back to how it was at the time of the latest commit on this branch.
Then all you have to do is just type git restore <file-name> and since the default source is actually HEAD. It will be converted back to how it was at the time of the latest commit. Or you may even choose to run the command git restore --source HEAD~1. So the basic point is that you can even move forward.

Other purpose of git restore :-
It's to remove files from the staging area.
See we know the git add command. 
And I read in some other course that git rm --cached <file-name>/<file-names> is a way to remove files from staging area.
Now there is an newer version of doing the same thing that can be done using git restore --staged <file-name>/<file-names>.

Reseting Commits :-
Imagine the situation where you're on main branch and you're working and you're making commits you realize oh shit I shouldn't have made these commits on the main branch but you don't want to go back a few commits and lose all this work.
In that case what you do is you use 
git reset <commit-hash> or git reset HEAD~X. Whatever you were doing after all these commits it doesn't matter the latest work was staged or unstaged all of it will come back with you temporarily (This is done for the cases you would still like to take these changes that you made in the new commits and even uncommited work that you did and make a separate branch basically after commit to the <commit-hash> commit for this work only. As soon as you add and commit them all these changes will stay on this new branch as when you go back to your master branch it will have only the <commit-hash> commit's code not the new one that you got from all the commits after it that was only temporary) to the commit whoever's commit-hash you wrote after git reset and all the commits after the commit hash you mentioned will be deleted .
git reset --hard <commit-hash> or git reset --hard HEAD-X will not be bringing any of the changes that you did after this <commit-hash> commit. It will delete both the commits as well as the changes that you did after that point permanently.
One more thing that I had a question for was like :-
Let's say I branch off from somewhere my branch reference actually points to the same commit now if I go ahead and do a hard reset will that commit be gone from both the branchs ?
Actually nope whenever you make a new branch from a commit you get an entirely new branch uptil that point.
So, Nope that commit will only be deleted from the branch that you did the git reset --hard on.

Reverting Commits :-
git revert <commit-hash> or git revert HEAD~X 
git revert is similar to git reset in that they both "undo" changes, but they accomplish it in different ways.
git reset actually moves the branch pointer backwards, eliminating commits.
git revert instead creates a brand new commit which reverses/undos the changes from a commit basically the commits prior to it won't be changed at all like they did in git reset but just a new commit will be formed with the data of the commit you mentioned in <commit-hash> and a new commit will be formed removing all the changes after the <commit-hash> commit. Because it results in a new commit, you will be prompted to enter a commit message. And in some cases you might even have to resolve merge conflicts.


Which One Should I Use?
Both git reset and git revert help us reverse changes, but there is a significant difference when it comes to collaboration (which we have yet to discuss but is coming up soon).
If you want to reverse some commits that other people already have on their machines, you should use revert cause completely deleting them might cause issues cause they were making commits after the commits that you chose to delete.
If you want to reverse commits that you haven't shared with others, use reset and no one will ever know.

You should focus on the slides of this course that will explain you things more clearly but still read all this text cause some things that I've wrote are not part of slides.
